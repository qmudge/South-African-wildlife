/**
 * @author: Quintin Mudge
 * Date: 15/02/2017
 * Lets user shutdown the server using a button.
 */
package co.za.wildlifeServer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Takes user name and password, Checks them against database values, Then
 * shuts down the server.
 */
public class LoginServerShutdown extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public LoginServerShutdown() {
        initComponents();
    }

    /**
     * Design and layout, initializes the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form
     * Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userNameLbl = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        passwordLbl = new javax.swing.JLabel();
        passwordTxt = new javax.swing.JPasswordField();
        continueBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Login");
        setLocation(new java.awt.Point(600, 350));

        userNameLbl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        userNameLbl.setText("User Name :");

        passwordLbl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        passwordLbl.setText("Password :");

        continueBtn.setText("Continue");
        continueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(106, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(passwordLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(97, 97, 97))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(userNameLbl)
                        .addGap(139, 139, 139))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(continueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(userNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(passwordLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(continueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event listener for continue button, Takes user input and matches it
     * against the database.
     */
    private void continueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueBtnActionPerformed

        /**
         * User input and check variables.
         */
        String name = nameTxt.getText();
        String password = new String(passwordTxt.getPassword());
        String nameChk = null;
        String passwordChk = null;
        String data = "jdbc:sqlserver://localhost:1433;databaseName=SaWild;integratedSecurity=true";
        //Makes new connection to database
        try {
            Connection conn = DriverManager.getConnection(data, "", "");

            //Query database
            try (PreparedStatement ps = conn.prepareStatement(
                    "SELECT user_name, password FROM clientUser "
                    + "WHERE user_name = ? and password = ?")) {

                //Sets prepared statement
                ps.setString(1, name);
                ps.setString(2, password);
                ResultSet rs = ps.executeQuery();

                //Stores values from Resultset.
                while (rs.next()) {
                    nameChk = rs.getString(1);
                    passwordChk = rs.getString(2);
                    System.out.println(name + password);
                }
                //close the connection.
            }
        } catch (SQLException e) {
            System.out.println(e.toString());
        }

        //Checks for match, Displays shutdown message dialog.
        if (name.equals(nameChk) && password.equals(passwordChk)) {

            this.dispose();
            //Close the server with closer method
            try {
                closer();
            } catch (IOException ex) {
                Logger.getLogger(LoginServerShutdown.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Displays input error dialog box when not matching.   
        } else {
            JOptionPane.showConfirmDialog(null,
                    "Incorrect Username or Password",
                    "Input Error",
                    JOptionPane.CANCEL_OPTION,
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_continueBtnActionPerformed

    /**
     * Connects to server and sends a message to close all connections.
     */
    private void closer() throws IOException {

        //Connection variables.
        Socket clientSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;

        //Create new connection.
        try {
            clientSocket = new Socket("127.0.0.1", 7777
            );
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                    clientSocket.getInputStream()));
        } catch (UnknownHostException e) {

            System.err.println("Don't know about host: 127.0.0.1");
            System.exit(1);
        } catch (IOException e) {
            JOptionPane.showConfirmDialog(null,
                    "Server not currently running.",
                    "Shutdown error",
                    JOptionPane.CANCEL_OPTION,
                    JOptionPane.ERROR_MESSAGE
            );
            System.exit(0);
        }
        BufferedReader line = new BufferedReader(new InputStreamReader(
                System.in));

        String fromServer;
        String fromUser;

        //Input received back from server.
        while ((fromServer = in.readLine()) != null) {
            System.out.println("Server: " + fromServer);
            if (fromServer.equals("stop")) {

                //Dialog box for server shutdown.
                JOptionPane.showMessageDialog(null, "Server Shutdown ",
                        " Server message",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            }

            //User input sent as String to server.
            fromUser = nameTxt.getText();
            if (fromUser != null) {
                System.out.println("Client: " + fromUser);
                out.println(fromUser);
            }
        }

        //Close connections
        out.close();
        in.close();
        line.close();
        clientSocket.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continueBtn;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JLabel userNameLbl;
    // End of variables declaration//GEN-END:variables
}
