/**
 * @author: Quintin Mudge
 * Date: 21/02/2017
 * Description: Administration control, Inserting and deleting from the database.
 */
package za.co.wildlife;

import java.io.*;
import java.net.*;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 * Contains JFrame Administration GUI plus methods to create client, Insert and
 * delete from database.
 */
public class AdminGui extends javax.swing.JFrame {

    /**
     * Client connections variables
     */
    Socket clientSocket = null;
    PrintWriter out = null;
    BufferedReader in = null;
    BufferedReader line = null;
    String fromServer;
    String fromUser;

    /**
     * JFrame GUI, Displays all the administrative components to insert and
     * delete records.
     */
    public AdminGui() {
        initComponents();

        //Style for headings
        String underlineHeading = "<html><u> Insert new records into database </u></html>";
        String underlineHeadingTwo = "<html><u> Delete a record from database </u></html>";
        insertRecordHeading.setText(underlineHeading);
        deleteRecordHeading.setText(underlineHeadingTwo);
    }

    /**
     * Design and layout, initializes the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form
     * Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminGuiPanel = new javax.swing.JPanel();
        adminGuiHeading = new javax.swing.JLabel();
        deleteRecordHeading = new javax.swing.JLabel();
        insertRecordHeading = new javax.swing.JLabel();
        newAnimalNamePnl = new javax.swing.JPanel();
        newAnimalBtn = new javax.swing.JButton();
        newTableRecordLbl = new javax.swing.JLabel();
        animalNameLbl = new javax.swing.JLabel();
        descriptionLbl = new javax.swing.JLabel();
        animalSpeciesIDLbl = new javax.swing.JLabel();
        animalNameTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTxt = new javax.swing.JTextArea();
        animalSpeciesIDTxt = new javax.swing.JTextField();
        newSpeciesPnl = new javax.swing.JPanel();
        newSpeciesLbl = new javax.swing.JLabel();
        speciesNameLbl = new javax.swing.JLabel();
        newSpeciesTxt = new javax.swing.JTextField();
        newSpeciesBtn = new javax.swing.JButton();
        deleteSpeciesPnl = new javax.swing.JPanel();
        deleteAnimalLbl = new javax.swing.JLabel();
        animalDeleteLbl = new javax.swing.JLabel();
        deleteAnimalTxt = new javax.swing.JTextField();
        deleteAnimalBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administrative control");
        setBackground(new java.awt.Color(255, 153, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.darkGray);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        getContentPane().setLayout(null);

        adminGuiPanel.setBackground(new java.awt.Color(153, 102, 0));
        adminGuiPanel.setPreferredSize(new java.awt.Dimension(1600, 950));

        adminGuiHeading.setBackground(new java.awt.Color(51, 0, 0));
        adminGuiHeading.setFont(new java.awt.Font("Georgia", 1, 48)); // NOI18N
        adminGuiHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        adminGuiHeading.setText("Edit Database information ");
        adminGuiHeading.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        deleteRecordHeading.setBackground(new java.awt.Color(153, 102, 0));
        deleteRecordHeading.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        deleteRecordHeading.setText("Delete a record from database");

        insertRecordHeading.setBackground(new java.awt.Color(153, 102, 0));
        insertRecordHeading.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        insertRecordHeading.setText("Insert new records into database");

        newAnimalNamePnl.setBackground(new java.awt.Color(204, 153, 0));
        newAnimalNamePnl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        newAnimalBtn.setText("Submit");
        newAnimalBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newAnimalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAnimalBtnActionPerformed(evt);
            }
        });

        newTableRecordLbl.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        newTableRecordLbl.setText("( New animal )");

        animalNameLbl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        animalNameLbl.setText("Animal name :");

        descriptionLbl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        descriptionLbl.setText("Description :");

        animalSpeciesIDLbl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        animalSpeciesIDLbl.setText("Species ID :");

        animalNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animalNameTxtActionPerformed(evt);
            }
        });

        descriptionTxt.setLineWrap(true);
        descriptionTxt.setColumns(20);
        descriptionTxt.setRows(5);
        jScrollPane1.setViewportView(descriptionTxt);

        animalSpeciesIDTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animalSpeciesIDTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newAnimalNamePnlLayout = new javax.swing.GroupLayout(newAnimalNamePnl);
        newAnimalNamePnl.setLayout(newAnimalNamePnlLayout);
        newAnimalNamePnlLayout.setHorizontalGroup(
            newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                .addComponent(newTableRecordLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                .addGroup(newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                                .addComponent(animalNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(animalNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                                .addGroup(newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(animalSpeciesIDLbl)
                                    .addComponent(descriptionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(animalSpeciesIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(newAnimalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        newAnimalNamePnlLayout.setVerticalGroup(
            newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newAnimalNamePnlLayout.createSequentialGroup()
                .addComponent(newTableRecordLbl)
                .addGroup(newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(newAnimalNamePnlLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(animalNameLbl)
                            .addComponent(animalNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(descriptionLbl)
                        .addGap(64, 64, 64)
                        .addGroup(newAnimalNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(animalSpeciesIDLbl)
                            .addComponent(animalSpeciesIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)))
                .addComponent(newAnimalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        newSpeciesPnl.setBackground(new java.awt.Color(102, 102, 0));
        newSpeciesPnl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        newSpeciesLbl.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        newSpeciesLbl.setText("( New species )");

        speciesNameLbl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        speciesNameLbl.setText("Species name :");

        newSpeciesTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSpeciesTxtActionPerformed(evt);
            }
        });

        newSpeciesBtn.setText("Submit");
        newSpeciesBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newSpeciesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSpeciesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newSpeciesPnlLayout = new javax.swing.GroupLayout(newSpeciesPnl);
        newSpeciesPnl.setLayout(newSpeciesPnlLayout);
        newSpeciesPnlLayout.setHorizontalGroup(
            newSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newSpeciesPnlLayout.createSequentialGroup()
                .addGroup(newSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(newSpeciesPnlLayout.createSequentialGroup()
                        .addComponent(newSpeciesLbl)
                        .addGap(144, 144, 144))
                    .addComponent(newSpeciesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newSpeciesPnlLayout.createSequentialGroup()
                .addComponent(speciesNameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newSpeciesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(273, 273, 273))
        );
        newSpeciesPnlLayout.setVerticalGroup(
            newSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newSpeciesPnlLayout.createSequentialGroup()
                .addComponent(newSpeciesLbl)
                .addGap(26, 26, 26)
                .addGroup(newSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speciesNameLbl)
                    .addComponent(newSpeciesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newSpeciesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        deleteSpeciesPnl.setBackground(new java.awt.Color(204, 102, 0));
        deleteSpeciesPnl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        deleteAnimalLbl.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        deleteAnimalLbl.setText("( Remove animal )");

        animalDeleteLbl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        animalDeleteLbl.setText("Animal name :");

        deleteAnimalBtn.setText("Delete");
        deleteAnimalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAnimalBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteSpeciesPnlLayout = new javax.swing.GroupLayout(deleteSpeciesPnl);
        deleteSpeciesPnl.setLayout(deleteSpeciesPnlLayout);
        deleteSpeciesPnlLayout.setHorizontalGroup(
            deleteSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteSpeciesPnlLayout.createSequentialGroup()
                .addComponent(deleteAnimalLbl)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(deleteSpeciesPnlLayout.createSequentialGroup()
                .addGroup(deleteSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteSpeciesPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(animalDeleteLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteAnimalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deleteSpeciesPnlLayout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(deleteAnimalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(286, Short.MAX_VALUE))
        );
        deleteSpeciesPnlLayout.setVerticalGroup(
            deleteSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteSpeciesPnlLayout.createSequentialGroup()
                .addComponent(deleteAnimalLbl)
                .addGap(27, 27, 27)
                .addGroup(deleteSpeciesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(animalDeleteLbl)
                    .addComponent(deleteAnimalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(deleteAnimalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout adminGuiPanelLayout = new javax.swing.GroupLayout(adminGuiPanel);
        adminGuiPanel.setLayout(adminGuiPanelLayout);
        adminGuiPanelLayout.setHorizontalGroup(
            adminGuiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminGuiPanelLayout.createSequentialGroup()
                .addGroup(adminGuiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminGuiPanelLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(newAnimalNamePnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(newSpeciesPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(adminGuiPanelLayout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(deleteRecordHeading))
                    .addGroup(adminGuiPanelLayout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(insertRecordHeading))
                    .addGroup(adminGuiPanelLayout.createSequentialGroup()
                        .addGap(347, 347, 347)
                        .addComponent(deleteSpeciesPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(adminGuiPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(adminGuiHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 1669, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        adminGuiPanelLayout.setVerticalGroup(
            adminGuiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminGuiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminGuiHeading)
                .addGap(18, 18, 18)
                .addComponent(insertRecordHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(adminGuiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newAnimalNamePnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newSpeciesPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(deleteRecordHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(deleteSpeciesPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(300, Short.MAX_VALUE))
        );

        getContentPane().add(adminGuiPanel);
        adminGuiPanel.setBounds(0, 0, 1700, 990);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Uses regular expressions to check the input when inserting a new animal.
     */
    private void regexNewAnimal() {
        //User input retrieved and stored inside variables.
        String animalAdd = animalNameTxt.getText();
        String descriptionAdd = descriptionTxt.getText();
        String speciesIDAdd = animalSpeciesIDTxt.getText();

        //Checking correct field input
        while (animalAdd != null && descriptionAdd != null && speciesIDAdd != null) {

            //Must have atleast 3 letters and max 3 words.
            boolean matchesAnimal = Pattern.matches(
                    "[a-zA-Z][a-zA-Z][a-zA-Z]+\\s*[a-zA-Z]*+\\s*[a-zA-Z]*", animalAdd);

            //No blanks or comma's
            boolean matchesDescription = Pattern.matches("^[^,]*[^ ,][^,]*$", descriptionAdd);

            //Only numbers
            boolean matchesSpecies = Pattern.matches("[0-9]+\\s*", speciesIDAdd);

            if (matchesAnimal && matchesDescription && matchesSpecies) {

                //Run add new animal method.
                try {
                    addAnimal();
                } catch (IOException ex) {
                    Logger.getLogger(AdminGui.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
                //Error message displayed for incorrect user input.
            } else {
                JOptionPane.showConfirmDialog(null,
                        "Animal name: must contain atleast 3 alphabetical letters "
                        + "\n[a-zA-Z] and consist of a maximum of three words."
                        + "\n\nDescription: may not be left empty or contain any comma's (,)."
                        + "\n\nSpecies ID: must contain atleast 1 digit.", "Input Error",
                        JOptionPane.CANCEL_OPTION,
                        JOptionPane.ERROR_MESSAGE
                );
                break;
            }
        }
    }

    /**
     * Uses regular expressions to check the input when inserting a new Species.
     */
    private void regexNewSpecies() {

        //User input stored in variable.
        String specAdd = newSpeciesTxt.getText();

        //Checking correct input
        while (specAdd != null) {
            boolean matchesSpec = Pattern.matches(
                    "[a-zA-Z][a-zA-Z][a-zA-Z]+\\s*[a-zA-Z]*", specAdd);

            //Runs add new species method.
            if (matchesSpec) {
                try {
                    addSpecies();
                } catch (IOException ex) {
                    Logger.getLogger(AdminGui.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println(specAdd);
                break;

                //Error message for incorrect user input.
            } else {
                JOptionPane.showConfirmDialog(null,
                        "Species name must contain atleast 3 alphabetical letters "
                        + "\n[a-zA-Z] and consist of a maximum of two words.",
                        "Input Error",
                        JOptionPane.CANCEL_OPTION,
                        JOptionPane.ERROR_MESSAGE
                );
                break;
            }
        }
    }

    /**
     * Uses regular expressions to check the input when deleting a animal.
     */
    private void regexDeleteAnimal() {

        //User input stored in variable
        String animalDel = deleteAnimalTxt.getText();

        //Checking correct input
        while (animalDel != null) {
            boolean matchesSpec = Pattern.matches(
                    "[a-zA-Z][a-zA-Z][a-zA-Z]+\\s*[a-zA-Z]*+\\s*[a-zA-Z]*", animalDel);

            //Runs delete animal method.       
            if (matchesSpec) {
                try {
                    deleteAnimalCLient();
                } catch (IOException ex) {
                    Logger.getLogger(AdminGui.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println(animalDel);
                break;

                //Error message for incorrect user input.
            } else {
                JOptionPane.showConfirmDialog(null,
                        "Animal name must contain atleast 3 alphabetical letters "
                        + "\n[a-zA-Z] and consist of a maximum of three words.",
                        "Input Error",
                        JOptionPane.CANCEL_OPTION,
                        JOptionPane.ERROR_MESSAGE
                );
                break;
            }
        }
    }

    /**
     * Uses declared variables to open a new client connection to communicate
     * with server.
     */
    public void client() {

        //Create new client socket and connections.    
        try {
            clientSocket = new Socket("127.0.0.1", 7777);
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                    clientSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: 127.0.0.1");
            System.exit(1);
        } catch (IOException e) {
            JOptionPane.showConfirmDialog(null,
                    "Unable to connect to server.\nMake sure that server is"
                    + " running and try again.",
                    "Connection Error",
                    JOptionPane.CANCEL_OPTION,
                    JOptionPane.ERROR_MESSAGE
            );
            System.exit(0);
        }
        line = new BufferedReader(new InputStreamReader(
                System.in));
    }

    /**
     * Contains variables and conditions to handle input sent and responses
     * received from the server when inserting a new animal record.
     */
    private void addAnimal() throws IOException {

        //Runs new client method   
        client();

        //User input sent as String to server.    
        while ((fromServer = in.readLine()) != null) {
            System.out.println("Server: " + fromServer);
            fromUser = animalNameTxt.getText() + "=" + descriptionTxt.getText()
                    + "=" + animalSpeciesIDTxt.getText() + "=newAnimal";
            System.out.println("Client: " + fromUser);
            out.println(fromUser);
            break;
        }

        //Input received back from server.
        fromServer = in.readLine();
        switch (fromServer) {

            //Stops user from making duplicate records.        
            case "nameExists":
                JOptionPane.showMessageDialog(null, "Name allready exists in the database",
                        " Failure to insert message",
                        JOptionPane.INFORMATION_MESSAGE);
                break;

            //Informs user of record being added.           
            case "recordInserted":
                JOptionPane.showMessageDialog(null, "Record inserted successfully",
                        "New entry message",
                        JOptionPane.INFORMATION_MESSAGE);
                break;

            //Tells user that species ID can not be found.            
            default:
                JOptionPane.showMessageDialog(null, "The species ID that you have entered does not exist."
                        + "\nCheck that the species exists before trying to add a new record."
                        + "\n\n Examples of existing species : (1) Mammal, (2) Fish, (3) Bird, (4) Reptile, Etc. ",
                        " Failure to insert message",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
        }

        //Closes all client connections.    
        out.close();
        in.close();
        line.close();
        clientSocket.close();
    }

    /**
     * Contains variables and conditions to handle input sent and responses
     * received from the server when inserting a new species record.
     */
    private void addSpecies() throws IOException {

        //Runs new client method.
        client();

        //User input sent as String to server.
        while ((fromServer = in.readLine()) != null) {
            System.out.println("Server: " + fromServer);
            fromUser = newSpeciesTxt.getText() + ",species";
            System.out.println("Client: " + fromUser);
            out.println(fromUser);
            break;
        }

        //Input received back from server.    
        fromServer = in.readLine();

        //Indicates to user that species was added.
        if (fromServer.equals("recordInserted")) {
            JOptionPane.showMessageDialog(null, "Record inserted successfully",
                    "New entry message",
                    JOptionPane.INFORMATION_MESSAGE);

            //Tell user that species allready exists.
        } else {
            JOptionPane.showMessageDialog(null, "Species allready exists in the database",
                    " Failure to insert message",
                    JOptionPane.INFORMATION_MESSAGE);
        }

        //Closes all client connections.    
        out.close();
        in.close();
        line.close();
        clientSocket.close();
    }

    /**
     * Contains variables and conditions to handle input sent and responses
     * received from the server when deleting a animal record.
     */
    private void deleteAnimalCLient() throws IOException {

        //Runs new client method.    
        client();

        //User input sent as String to server.    
        while ((fromServer = in.readLine()) != null) {
            System.out.println("Server: " + fromServer);
            fromUser = deleteAnimalTxt.getText() + ",delete";
            System.out.println("Client: " + fromUser);
            out.println(fromUser);
            break;
        }

        //Input received back from server.    
        fromServer = in.readLine();

        //Indicates that record has been deleted.
        if (fromServer.equals("recordDeleted")) {
            JOptionPane.showMessageDialog(null, "Record deleted successfully",
                    "Old entry removal message",
                    JOptionPane.INFORMATION_MESSAGE);

            //Tells user that animal name is not in the database.
        } else {
            JOptionPane.showMessageDialog(null, "Animal name does not exist",
                    " Failure to delete message",
                    JOptionPane.INFORMATION_MESSAGE);
        }

        //Closes all client connections.    
        out.close();
        in.close();
        line.close();
        clientSocket.close();
    }


    private void animalNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animalNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_animalNameTxtActionPerformed

    private void animalSpeciesIDTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animalSpeciesIDTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_animalSpeciesIDTxtActionPerformed

    private void newSpeciesTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpeciesTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newSpeciesTxtActionPerformed
    /**
     * Listener for adding a new animal button.
     *
     * @param evt
     */
    private void newAnimalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAnimalBtnActionPerformed
        regexNewAnimal();

    }//GEN-LAST:event_newAnimalBtnActionPerformed
    /**
     * Listener for adding a new species button.
     *
     * @param evt
     */
    private void newSpeciesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpeciesBtnActionPerformed
        regexNewSpecies();
    }//GEN-LAST:event_newSpeciesBtnActionPerformed
    /**
     * Listener for deleting a animal button.
     *
     * @param evt
     */
    private void deleteAnimalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAnimalBtnActionPerformed
        regexDeleteAnimal();
    }//GEN-LAST:event_deleteAnimalBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminGuiHeading;
    private javax.swing.JPanel adminGuiPanel;
    private javax.swing.JLabel animalDeleteLbl;
    private javax.swing.JLabel animalNameLbl;
    private javax.swing.JTextField animalNameTxt;
    private javax.swing.JLabel animalSpeciesIDLbl;
    private javax.swing.JTextField animalSpeciesIDTxt;
    private javax.swing.JButton deleteAnimalBtn;
    private javax.swing.JLabel deleteAnimalLbl;
    private javax.swing.JTextField deleteAnimalTxt;
    private javax.swing.JLabel deleteRecordHeading;
    private javax.swing.JPanel deleteSpeciesPnl;
    private javax.swing.JLabel descriptionLbl;
    private javax.swing.JTextArea descriptionTxt;
    private javax.swing.JLabel insertRecordHeading;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newAnimalBtn;
    private javax.swing.JPanel newAnimalNamePnl;
    private javax.swing.JButton newSpeciesBtn;
    private javax.swing.JLabel newSpeciesLbl;
    private javax.swing.JPanel newSpeciesPnl;
    private javax.swing.JTextField newSpeciesTxt;
    private javax.swing.JLabel newTableRecordLbl;
    private javax.swing.JLabel speciesNameLbl;
    // End of variables declaration//GEN-END:variables
}
